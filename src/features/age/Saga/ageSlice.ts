import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import getNameData from "../../../api/getNameData";

export interface AgeState {
  agePrediction: number | undefined
  isLoading: boolean;
  isError: boolean;
}

const initialState: AgeState = {
  agePrediction: undefined,
  isLoading: false,
  isError: false
};

export const getPrediction = createAsyncThunk(
  'age/getPrediction',
  async (name: string, thunkApi: any) => {
      const data = await getNameData(name);
      const parsedData = await data.json();
      // throw 12
      return parsedData.age
  }
);

export const ageSlice = createSlice({
  name: 'age',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPrediction.pending, (state) => {
        console.log('pend')
        state.isLoading = true;
      })
      .addCase(getPrediction.rejected, (state) => {
        console.log('fail')
        state.isLoading = false;
        state.isError = true;
      })
      .addCase(getPrediction.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isError = false;
        console.log(action)
        state.agePrediction = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectAge = (state: RootState) => state.age.value;


export default ageSlice.reducer;
